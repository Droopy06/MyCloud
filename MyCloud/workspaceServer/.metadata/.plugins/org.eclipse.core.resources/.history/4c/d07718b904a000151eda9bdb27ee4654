/*
*	server.hpp
 *
 *  Created on: 28 oct. 2014
 *      Author: nicolas
 */

#include "DataBaseType.h"
#include "MySQl.h"
#include <boost/asio.hpp>
#include <boost/bind.hpp>
#include <iostream>
#include "connection.hpp" // serialisation
#include <boost/serialization/vector.hpp>
#include "../model/info.hpp"
#include <fstream>

namespace mycloud {
namespace service{

class server
{
public:
	// constucteur
	server(boost::asio::io_service& io_service, unsigned short port)
: acceptor_(io_service, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port)) {
		// accepte une nouvelle connexion
		connection_ptr new_conn(new connection(acceptor_.get_io_service()));
		acceptor_.async_accept(new_conn->socket(), boost::bind(&server::handle_accept, this, boost::asio::placeholders::error, new_conn));
	}
	/// handle appelé après acceptation
	void handle_accept(const boost::system::error_code& e, connection_ptr conn)	{
		if (!e)	{	// acceptation réussie
			// lecture des informations
			conn->async_read(infos, boost::bind(&server::handle_read, this, boost::asio::placeholders::error, conn));
		}
		// démarrage d'une nouvelle connection
		connection_ptr new_conn(new connection(acceptor_.get_io_service()));
		acceptor_.async_accept(new_conn->socket(), boost::bind(&server::handle_accept, this, boost::asio::placeholders::error, new_conn));

	}
	// handle appelé après lecture
	void handle_read(const boost::system::error_code& e, connection_ptr conn)	{
		if (!e)	{	// lecture des informations
			db::DataBaseType<MySQL> dbMySQL("root", "123456", "mycloud") ;
			string idMySQL;

			for(model::info i : infos)	{
				idMySQL = dbMySQL.getUser(i.getAddressMail(), i.getPwd());
			}
			if(idMySQL == "1"){
				cout << "Connexion réussi" << endl;


				std::string pathInfo("/home/server/" + idMySQL + "/referencement.xml");
				std::ofstream ofs(pathInfo.c_str());

				const File file("/home/steven/Documents/azeaze");
				{
					boost::archive::xml_oarchive oa(ofs);
					oa << boost::serialization::make_nvp("option", file);
				}


				std::string path="/home/steven/Documents/aze.xml";
				std::ifstream input(path.c_str());
				std::stringstream data_in;
				data_in << input.rdbuf();
				input.close();

				conn->socket().send(boost::asio::buffer(data_in.str()));
			}else{
				cout << "Connexion échoué" << endl;
			}



		} else {
			std::cerr << e.message() << std::endl;
		}
	}
private:
	boost::asio::ip::tcp::acceptor acceptor_;
	std::vector<model::info> infos;

};

}
}
