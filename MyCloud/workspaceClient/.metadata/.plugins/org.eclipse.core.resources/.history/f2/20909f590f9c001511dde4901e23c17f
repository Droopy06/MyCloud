/*
*	client.hpp
 *
 *  Created on: 28 oct. 2014
 *      Author: nicolas
 */

#include <boost/asio.hpp>
#include <boost/bind.hpp>
#include <iostream>
#include "../service/connection.hpp"	/* serialisation */
#include <boost/serialization/vector.hpp>
#include "../model/info.hpp"

namespace client {
namespace service{

class client
{
public:
	// constructeur
	client(const std::vector<mycloud::model::info> & infos, boost::asio::io_service& io_service, const std::string& host, const std::string& service)
: connection_(io_service)	{
		// resoudre l'adresse
		boost::asio::ip::tcp::resolver resolver(io_service);
		boost::asio::ip::tcp::resolver::query query(host, service);
		boost::asio::ip::tcp::resolver::iterator endpoint_iterator = resolver.resolve(query);
		// connection au serveur
		boost::asio::async_connect(connection_.socket(), endpoint_iterator, boost::bind(&client::handle_connect, this, boost::asio::placeholders::error, infos));
	}
	// handle appelé après connection
	void handle_connect(const boost::system::error_code& e, const std::vector<mycloud::model::info> & infos)	{
		if (!e)	{	// connection réussie
			// envoye des informations
			connection_.async_write(infos, boost::bind(&client::handle_write, this, boost::asio::placeholders::error));
		} else {	// echec
			std::cerr << e.message() << std::endl;
		}
	}
	// handle appelé après émission
	void handle_write(const boost::system::error_code& e)
	{
		if (e) {
			std::cerr << e.message() << std::endl;
		}
	}
private:
	// connection au serveur
	connection connection_;
};

}

}
