//============================================================================
// Name        : MyCloud.cpp
// Author      : Alexandre Steven
// Version     : 1.0
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================
/*
 #include <LibPath.cpp>
 #include <fstream>

 int main(int argc, char* argv[]) {
 std::string pathInfo("/home/steven/Documents/aze.xml");
 std::ofstream ofs(pathInfo.c_str());

 const File file("/home/steven/Documents/azeaze");
 {
 boost::archive::xml_oarchive oa(ofs);
 oa << boost::serialization::make_nvp("option", file);
 }

 return 0;
 }
 */
/*
 * main.cpp
 *
 *  Created on: 28 oct. 2014
 *      Author: nicolas
 */

#include <string.h>
#include <iostream>

#include <boost/lexical_cast.hpp>

#include "../model/info.hpp"
#include "../service/client.hpp"
#include <vector>
#include <fstream>

namespace mycloud {

int run_client(const std::vector<mycloud::model::info> & infos,
		int tentativeConnexion) {
	int connexion;
	try {
		boost::asio::io_service io_service;
		service::client client(infos, io_service, "127.0.0.1", "5554");
		connexion = io_service.run();
	} catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
	}
	if (connexion == 1 && tentativeConnexion <= 3) {
		std::cerr << "Tentative connexion numÃ©ros : " << tentativeConnexion << " ..." << std::endl;
		tentativeConnexion = tentativeConnexion + 1;
		run_client(infos, tentativeConnexion);
		wait(10);
	}

	return 0;
}
}

int main(int argc, char ** argv) {
	std::cerr << "Connexion au serveur" << std::endl;

	std::vector < mycloud::model::info > infos;

	mycloud::model::info iFirst;
	iFirst.setAddressMail("groover.dieu@gmail.com");
	iFirst.setPwd("1234567");

	infos.push_back(iFirst);

	mycloud::run_client(infos, 1);

	return 0;
}

